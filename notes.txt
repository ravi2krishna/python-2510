28th Aug 2025
=============

    -> Python : Python is a high-level, general-purpose programming language. 
    Its design philosophy emphasizes code readability with the use of 
    significant indentation. Python is dynamically type-checked and garbage-collected.

    -> Programming Language : To Communicate with Machines(Computers) 

    -> Human To Human : English, Hindi, Telugu etc

    -> Human To Machine : Programming Language

    -> Machines use : Binary Language (101010101)

        -> 01110000 01111001 01110100 01101000 01101111 01101110

    -> Python is a high-level language

        -> Easy for humans to understand 

        -> Designed for Application Development 

        -> Slow Execution

    -> Low Level Programming Languages

        -> Difficult for humans to understand  

        -> Designed for Hardware Level(Embedded Systems)

        -> Fast Execution

    -> General-purpose programming language

        -> Work with 

            -> Desktop Applications
            -> Web Applications
            -> API Development
            -> etc 

    -> Domain Specific programming language

        -> SQL - Structured Query Language is a domain-specific language 
            used to manage data, especially in a relational database management system.

            -> SQL - Only for data management inside databases 


    -> Programming Paradigms 

        -> Structure the implementation of a computer program

        -> Python is a Multi Paradigm programming language

            -> Imperative Style / Approach

                -> How To Do (Task/Action)

                -> w.r.t python OOPS 

            -> Declarative Style / Approach

                -> What To Do (Task/Action)

                -> w.r.t python Functional Programming 


    -> Hardware 

        -> i3 / i5(*) processor 
        -> 8 GB RAM at least
        -> 500 GB of HDD

    -> Softwares 

        -> System Softwares (OS)

            -> Win / Linux / Unix(macos)

                -> Install Python (Python Interpreter)

                    -> Making your system capable of running python code

                -> Install IDE (Integrated Development Environment) 

                    -> For writing code 

                    -> With IDE's you got support for 

                        -> Auto Code Completion

                        -> Syntax Highlighting

                        -> External Extensions (Plugins)

                        -> Debugging tools etc

                    -> Install Visual Studio Code (VS Code)

                -> Install Git (Version Controlling - Code Tracking)

                    -> For Code Tracking

                    -> Git can track code in your workstation (Your Laptop)

                    -> GitHub : Platform from microsoft to store the code of a project

                        -> We have 5 developers, all the 5 developers will have their own 
                        Laptops, in their individual laptops they will install git (client)    

                        -> All the 5 developers, when they have completed their work, using
                            git they will upload all their code to GitHub

        -> NOTE : Integrate VS Code --> Git --> GitHub 

            -> VS Code (Write Code)
            -> Git     (Track Code)
            -> GitHub  (Store Code)

            
29th Aug 2025
=============

-> Install Python 

    -> Verify using : python --Version

-> Start Writing Python Code

    -> Script Mode (100%)

        -> Using Files / Using IDE

        -> NOTE : Files are permanently stored on disk, and later pushed to Github

    -> Command Line Mode / Interactive Mode (Quick Checks)

        -> No files, directly working with Interpreter

        -> NOTE : The values are expressions are only valid for that particular session only,
            once we close the session/window, values are obsolete 

    -> Like English has 26 alphabets, which forms the whole english language

    -> In python we have keywords (35)

        -> keywords + Syntax = program / application

    -> keywords - hold special meaning to python 

    ->  False      await      else       import     pass
        None       break      except     in         raise
        True       class      finally    is         return
        and        continue   for        lambda     try
        as         def        from       nonlocal   while
        assert     del        global     not        with
        async      elif       if         or         yield    


-> Identifiers

    -> An Identifier in python is a name used to Identify

        -> variable
        -> function
        -> class
        -> object 
        -> method
        -> etc

    -> Rules for naming Identifiers in python

        -> Can Contain:

            -> Letters (a-z, A-Z) 
            -> Digits(0-9)
            -> Only Underscore(_)

        -> Must Start with:

            -> A letter (a-z, A-Z)
            -> A Underscore(_)

        -> Cannot start with Digit
        -> Cannot be a keyword 
        -> Case Sensitive - name, Name, NAME     

-> Variables

    -> Variables are names for memory locations

        -> Memory (Physically) - RAM 

        -> Disk (Storing Files)

    -> A variable will allow you to

        -> Assign Data
        -> Manipulate Data (If Required) 
        -> Retrieve Data

    -> Syntax 

        -> variable_name = value
           course_duration = 35

           = Assignment Operator 


    -> NOTE : use id() to get memory locations of Variables

    -> NOTE : use type() to get the type of data 


30th Aug 2025
=============

-> Output Data : print() --> stdout --> monitor

-> Concatenation : Is joining multiple strings together, using + operator 

-> NOTE : There is a concept over operator(+) overloading (Polymorphism), where a single 
    entity can exhibit multiple behaviors 

    -> using + operator, we can also perform mathematical addition operations, 
        when dealing with numbers

-> Interpolation : Is replacing placeholders with actual values

-> Using f-strings (Formatted String Literals)

    -> An f-string allows you to embed variables directly inside a string using {} 

    -> when using f-strings for print we add "f"


-> Operators : In python, an operator is symbol which performs an operation on
    variables and its values

    -> To Manipulate the data inside variable we need Operators

    -> Arithmetic Operators : Mathematical operations    
        -> + - * / %
        -> // - floor division(same as division, but rounds off value)
        -> ** - exponentiation(power)

    -> Compound Assignment Operators: Combining Arithmetic & Assignment Operators
        -> Used for concise(short hand) code 
        -> x = x + 5 (without Compound Assignment Operator)
        -> x += 5 (with Compound Assignment Operator)
        -> x *= 5
        
    -> Comparison Operators 
        -> Used to compare Values and they return boolean(True/False) as result
        -> ==, !=, >, <, >=, <=

    -> Logical Operators
        -> Used to combine multiple conditions(boolean values) 
        -> and : returns true, when both conditions are true
        -> or : returns true, when at least one condition is true
        -> not : negates the boolean value, if value is true, when we negate, 
            it becomes false 

    -> Membership Operators
        -> Used to test if a sequence is present in a object
            -> in : returns True, if the sequence has specified value
            -> not in : returns True, if the sequence has no specified value

    -> Identity Operators
        -> Used to compare objects    
        -> is : returns True, if both variables are pointing to same address
        -> is not : returns True, if both variables are not pointing to same address    
        -> NOTE : We use == to compare values

    -> OPTIONAL : Bitwise Operators
        -> Used for working with low level programming i.e binary bits (1001's)


-> Data Types 

    -> Data types are categories that define, what kind of data a variable can hold

    -> Python is dynamic type checked language 

    -> Let say i'm in java world (Static Typed Language)
        String brand = "THE BEAR HOUSE";
        String desc =  "Men Maroon & Navy Blue Slim Fit Checked Flannel Casual Shirt";
        float rating = 4.3f;
        int price = 923;

    -> Let say i'm in python world (Dynamic Typed Language)
        brand = "THE BEAR HOUSE"
        desc =  "Men Maroon & Navy Blue Slim Fit Checked Flannel Casual Shirt"
        rating = 4.3
        price = 923   
    
    -> Numeric Types 

        -> int : Whole numbers 0,1,-10, 20 etc
        -> float : Decimal numbers 3.14, 5.5, 2.0 etc
        -> complex :  in math we have a + ib ( i - imaginary number)
                      in python we use a + jb ( j - imaginary number)

    -> Text Type : String is a sequence of characters enclosed b/w ' ' or " "    

    -> Boolean Type : True / False

    -> Sequence Type 

        -> String : String is a sequence of characters enclosed b/w ' ' or " "    
        -> List : Multiple Values stored inside [] -> [10,20,30] -> Mutable
        -> Tuple : Multiple Values stored inside () -> (10,20,30) -> Immutable

    -> Set Type

        -> Set : Multiple Values stored inside {} -> {10,20,30} -> Mutable & Unique
        -> Frozen Set : Multiple Values stored inside {} -> {10,20,30} -> Immutable & Unique

    -> Mapping Type

        -> Dictionary : Multiple Key & Values stored inside {"name":"Ravi", "age":25} ->     

    -> None Type 

        -> Represent absence of value 

    -> NOTE : All above are pre-defined data types


3rd Sep 2025
============

-> Student Management System

-> Type Conversion & Type Casting

    -> The above are used to convert values from one data type to another data type

    -> Type Conversion : Implicit / Automatic meaning python by default performs 
        conversions when it's safe and there is no data loss 
            -> Widening : conversion of smaller data types to larger 
    
    -> Type Casting : Explicit / Manually done by developer using built in functions
        -> Narrowing : conversion of larger data types to smaller 
            -> int() -> converts to integer --> int(3.5) - 3
            -> float() -> converts to float --> int(3) - 3.0
            -> str() -> converts to string --> str(100) - "100"
            
4th Sep 2025
============

    -> Control Structures / Statement

    -> Control Structures helps you to control the flow of execution in program

    -> Categories

        -> Decision Making Statements (Conditional Statements)
        -> Looping Statements (Iterative Statements)
        -> Branching Statements (Jump Statements)

    -> Conditional / Decision Making Statements

        -> Used to evaluate a condition (True/False) 

        -> if : Runs block of code if condition is true
        -> if else : Runs one block of code if condition is true and 
                     runs another block of code if condition is false
        -> elif ladder : Used to check multiple conditions 
        -> match-case : alternative to if-else, when you have multiple conditions
    
    -> Indentation : Refers to spaces to the beginning of the line that will 
        define code blocks (conditionals, loops, functions, classes etc)

        -> At least one space or recommended is 4 spaces 
        -> All lines in the same block must have same Indentation
        -> Improper Indentation : Syntax Error
    
    -> input() function : takes user input from keyboard as a string 

        -> variable = input("Enter Some Value)

    -> Ternary Operator : also called as Conditional Operator, allows you to
        write short hand if-else Statement, generally used for single expressions

        -> Syntax : 
            value_if_true if condition else value_if_false


5th Sep 2025
============

    -> Nested Conditionals : Conditionals inside Conditionals

    -> Looping Statements (Iterative Statements)

        -> Used to execute a block of code repeatedly, based on a condition.

            -> For repetitive tasks and automation tasks
        
        -> while loop : Runs a block of code, as long as the specified condition is True

        -> for loop : Used to Iterate over a Sequence(Strings, Lists, Tuples, Range etc)
    
        -> dir() : used to list all the valid attributes and functionalities 

        -> range() : used to generate a sequence of numbers

6th Sep 2025
============

    -> range(start,stop,step)

        -> start: starting value by default is 0
        -> stop: ending value(excluded)
        -> step: increment default is 1

    -> few examples

        -> range(5) : 0 1 2 3 4
        -> range(1,6) : 1 2 3 4 5
        -> range(1,6,1) : 1 2 3 4 5
        -> range(2,10,2) : 2 4 6 8 

    -> To Do the step reverse use -1

        -> range(10,1,-1) : 10 9 8 7 6 5 4 3 2
        -> range(10,1,-2) : 10 8 6 4 2
    
    -> Nested Loops : Loops inside Loops

    -> Branching Statements (Jump Statements)

        -> Used to control the flow of iterations inside the loops  

            -> break : exits the loop entirely
            -> continue : skips the current iteration and continue the loop
            -> pass : does nothing, generally used as place holder

8th Sep 2025
============

-> Strings : One of the most important and widely used data type.

-> In Python, String is a sequence of characters enclosed within 
    single or double quotes, we can use triple quotes also but not recommended.

    -> NOTE : triple quotes are recommended for multi line strings 

    -> If you want to use ' inside a string, enclose with double quotes

    -> If you want to use " inside a string, enclose with single quotes

    -> If you want to use both ' and " quote, then use triple single or double quotes

-> Indexing In Python

    -> Python allows you to access each character in a string using an index number

    -> Index Starts From 0 (Zero)

    -> Indexing goes in both positive and negative directions too

    -> text = "python"

        0   1   2   3   4   5 (positive indexing)
        p   y   t   h   o   n
       -6              -2   -1 (negative indexing)

       -> print(text[index])
       -> print(text[4]) # o
    
    -> If index is not given properly, leads to Errors

    -> NOTE: we have a predefined function len() -> returns number of items in an object


    -> Slicing In Python : Slicing means cutting a substring from the original string using index

        -> To access range of characters in a string

        -> string[start:stop:step]

            start: index to start from (inclusive)
            stop: index to stop at (exclusive)
            step: how many character to step(default is 1)


9th Sep 2025
============

    -> Negative Slicing (Backward)

    -> Positive Slicing (Forward)

    -> String Immutability : Once a string is created, it cannot be changed 
    
    -> String Formatting 

    -> String Repetition : Multiply the string using * operator

    -> String Methods : String class provides multiple methods to work with string related operations

        -> Input : RAvi2KRIshna

        -> Output : ravi2krishna@gmail.combine

10th Sep 2025
=============

    -> String Methods : Continued 

    -> Application Using 
        [ Identifiers - Variables - Operators - Control Statements - Strings]

    
12th Sep 2025
=============

13th Sep 2025
=============

    -> Enhanced Student Grade & FEE Tracker - 2

15th Sep 2025
=============

    -> Complex Data Types (Data Structures)

        -> Simple Data Type : One Value 

            -> data = 10

        -> Complex Data Type : Multiple Values 

            -> data = [10,20,30,40,50] 

    -> In python to store more than one value, we have following classes

        -> Lists
        -> Tuples
        -> Sets
        -> Dictionaries

    -> Lists 

        -> List is a data Structure which allows you to store multiple values in single variable

        -> Lists are represented using [] or using list class

        -> Accessing Data in lists

            -> Like in strings, for lists we have index starts from 0

            -> Has both positive and negative index

            -> Indexing same as strings

            -> Slicing same as strings

            -> nums = [10,20,30,40,50]

                     0   1    2    3    4  (positive indexing)
                    10   20   30   40   50  
                    -6             -2   -1 (negative indexing)
            
            -> string[start:stop:step]

            start: index to start from (inclusive)
            stop: index to stop at (exclusive)
            step: how many character to step(default is 1)

    -> Negative Slicing (Backward)

    -> Positive Slicing (Forward)


16th Sep 2025
=============

    -> Looping Through Lists 

    -> Using Operators on elements of lists

    -> Conditionals with Lists 

    -> Duplicates are also allowed in Lists 

    -> List Methods / Operations

        print(dir(list))


17th Sep 2025
=============

-> List Methods / Operations Continued 

-> List Characteristics 

    -> Ordered : Lists preserve order 

    -> Mutable : Changeable / Modifiable (append(), remove())

    -> Duplicates allowed 

    -> Can hold different types of data (int, str, float etc)


->  Tuples 

     -> Tuples is a data Structure which allows you to store multiple values in single variable

        -> Tuples are represented using () or using tuple class

        -> Accessing Data in Tuples

            -> Like in strings, for Tuples we have index starts from 0

            -> Has both positive and negative index

            -> Indexing same as strings

            -> Slicing same as strings

            -> nums = (10,20,30,40,50)

                     0   1    2    3    4  (positive indexing)
                    10   20   30   40   50  
                    -6             -2   -1 (negative indexing)
            
            -> string[start:stop:step]

            start: index to start from (inclusive)
            stop: index to stop at (exclusive)
            step: how many character to step(default is 1)

    -> Negative Slicing (Backward)

    -> Positive Slicing (Forward)

    -> Looping Through Tuples 

    -> Using Operators on elements of Tuples

    -> Conditionals with Tuples 

    -> Duplicates are also allowed in Tuples 

    -> Tuples Methods / Operations

        print(dir(tuple))
    

-> Tuples Characteristics 

    -> Ordered : Tuples preserve order 

    -> Immutable(*) : Not Changeable / Not Modifiable (only index() & count())

    -> Duplicates allowed 

    -> Can hold different types of data (int, str, float etc)

    -> NOTE : Tuples should be used in READ ONLY DATA (Constant/Fixed/Static)

18th Sep 2025
=============

-> Dictionaries (Mapping Type Of Data)

    -> Dictionaries are a data Structure which allows you to store multiple key values in single variable

    -> key:value : Item/Pair 

    -> Dictionaries are represented using {} or using dict class

    -> NO INDEXING 

    -> NO SLICING 

    -> key:value ==> immutable:any_object

        -> keys can be immutables only (tuple, string, int)

        -> values can be any object

19th Sep 2025
=============

    -> Dictionary Operations

    -> Dictionary Characteristics 

        -> Ordered : Dictionary preserve order 

        -> Mutable : Changeable / Modifiable (update(), clear())

        -> Duplicates allowed 

            -> keys cannot be duplicates, if they are values will be replaced 

            -> value can be duplicates

        -> Can hold different types of data 

            -> keys should immutable only

            -> values can be any object
        
        -> NOTE : Dictionaries should be used in MAPPING TYPE Of data

-> Sets 

    -> Sets is a data Structure which allows you to store multiple values in single variable

        -> Sets are represented using {} or using set class

        -> dict = {1:100,2:200}
        -> set = {100,200}

    -> Sets are UUU 

        -> U - Unique (No Duplicates, if you add they will be removed)
        -> U - Unordered (Insertion Order is not preserved)
        -> U - Unindex (No Index)

        -> No Indexing

        -> No Slicing

    -> Sets are used especially for set related Mathematical operations

        -> Union
        -> Intersection 
        -> Difference 
        -> Symmetric Difference

20th Sep 2025
=============

    -> Set Operations

    -> Set is Mutable 
    -> FrozenSet is Immutable

    -> Set Characteristics 

        -> UnOrdered : Set don't preserve order 

        -> Mutable : Changeable / Modifiable 

        -> Duplicates Not allowed 

        -> Can hold different types of data (int, str, float etc)

        -> NOTE : Sets should be used in unordered / random access

        -> ImMutable Set: FrozenSet

22nd Sep 2025
=============

    -> Student Management System Using Complex Data Types 

    -> This Application will simulate CRUD operations that we perform on Databases 

    -> As of now it's a console based Application

    -> If you know web app frameworks, then you can build a web layer around this 

        -> Django 

23rd Sep 2025
=============

    -> Student Management System Continued 


24th Sep 2025
=============

    -> Functional Programming

    -> Functions : A function is block of code, which performs some task

    -> Why Functions ?

        -> Functions can help you break down complex problems into simpler and smaller manageable sub tasks  

        -> You can call a function multiple times, which avoids code Repetition, eventually 
            helps in code REUSABILITY 

    
    -> Syntax : 

        def function_name():
            Statements
    
    -> Functions with parameters 

        -> Using parameters with functions we can pass dynamic input for doing tasks

        def function_name(param 1, param 2, ...):
            Statements
    
    -> Function Types : Based on the arguments we pass, we have different types of Functions

        -> Positional Argument Based 
        -> Default Argument Based 
        -> Keyword Argument Based 
        -> Arbitrary Positional Argument Based (*args)
        -> Arbitrary Keyword Argument Based (**kwargs)

    
    -> Positional Argument Based 

        -> The passed argument to the function, should be in the exact order defined inside the function signature

        -> Here based on positions functionality will change 

    -> Default Argument Based 

        -> Passing default values as arguments to the functions

        -> Once we start adding default arguments, the next consecutive arguments should be default only 