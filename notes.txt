28th Aug 2025
=============

    -> Python : Python is a high-level, general-purpose programming language. 
    Its design philosophy emphasizes code readability with the use of 
    significant indentation. Python is dynamically type-checked and garbage-collected.

    -> Programming Language : To Communicate with Machines(Computers) 

    -> Human To Human : English, Hindi, Telugu etc

    -> Human To Machine : Programming Language

    -> Machines use : Binary Language (101010101)

        -> 01110000 01111001 01110100 01101000 01101111 01101110

    -> Python is a high-level language

        -> Easy for humans to understand 

        -> Designed for Application Development 

        -> Slow Execution

    -> Low Level Programming Languages

        -> Difficult for humans to understand  

        -> Designed for Hardware Level(Embedded Systems)

        -> Fast Execution

    -> General-purpose programming language

        -> Work with 

            -> Desktop Applications
            -> Web Applications
            -> API Development
            -> etc 

    -> Domain Specific programming language

        -> SQL - Structured Query Language is a domain-specific language 
            used to manage data, especially in a relational database management system.

            -> SQL - Only for data management inside databases 


    -> Programming Paradigms 

        -> Structure the implementation of a computer program

        -> Python is a Multi Paradigm programming language

            -> Imperative Style / Approach

                -> How To Do (Task/Action)

                -> w.r.t python OOPS 

            -> Declarative Style / Approach

                -> What To Do (Task/Action)

                -> w.r.t python Functional Programming 


    -> Hardware 

        -> i3 / i5(*) processor 
        -> 8 GB RAM at least
        -> 500 GB of HDD

    -> Softwares 

        -> System Softwares (OS)

            -> Win / Linux / Unix(macos)

                -> Install Python (Python Interpreter)

                    -> Making your system capable of running python code

                -> Install IDE (Integrated Development Environment) 

                    -> For writing code 

                    -> With IDE's you got support for 

                        -> Auto Code Completion

                        -> Syntax Highlighting

                        -> External Extensions (Plugins)

                        -> Debugging tools etc

                    -> Install Visual Studio Code (VS Code)

                -> Install Git (Version Controlling - Code Tracking)

                    -> For Code Tracking

                    -> Git can track code in your workstation (Your Laptop)

                    -> GitHub : Platform from microsoft to store the code of a project

                        -> We have 5 developers, all the 5 developers will have their own 
                        Laptops, in their individual laptops they will install git (client)    

                        -> All the 5 developers, when they have completed their work, using
                            git they will upload all their code to GitHub

        -> NOTE : Integrate VS Code --> Git --> GitHub 

            -> VS Code (Write Code)
            -> Git     (Track Code)
            -> GitHub  (Store Code)

            
29th Aug 2025
=============

-> Install Python 

    -> Verify using : python --Version

-> Start Writing Python Code

    -> Script Mode (100%)

        -> Using Files / Using IDE

        -> NOTE : Files are permanently stored on disk, and later pushed to Github

    -> Command Line Mode / Interactive Mode (Quick Checks)

        -> No files, directly working with Interpreter

        -> NOTE : The values are expressions are only valid for that particular session only,
            once we close the session/window, values are obsolete 

    -> Like English has 26 alphabets, which forms the whole english language

    -> In python we have keywords (35)

        -> keywords + Syntax = program / application

    -> keywords - hold special meaning to python 

    ->  False      await      else       import     pass
        None       break      except     in         raise
        True       class      finally    is         return
        and        continue   for        lambda     try
        as         def        from       nonlocal   while
        assert     del        global     not        with
        async      elif       if         or         yield    


-> Identifiers

    -> An Identifier in python is a name used to Identify

        -> variable
        -> function
        -> class
        -> object 
        -> method
        -> etc

    -> Rules for naming Identifiers in python

        -> Can Contain:

            -> Letters (a-z, A-Z) 
            -> Digits(0-9)
            -> Only Underscore(_)

        -> Must Start with:

            -> A letter (a-z, A-Z)
            -> A Underscore(_)

        -> Cannot start with Digit
        -> Cannot be a keyword 
        -> Case Sensitive - name, Name, NAME     

-> Variables

    -> Variables are names for memory locations

        -> Memory (Physically) - RAM 

        -> Disk (Storing Files)

    -> A variable will allow you to

        -> Assign Data
        -> Manipulate Data (If Required) 
        -> Retrieve Data

    -> Syntax 

        -> variable_name = value
           course_duration = 35

           = Assignment Operator 


    -> NOTE : use id() to get memory locations of Variables

    -> NOTE : use type() to get the type of data 


30th Aug 2025
=============

-> Output Data : print() --> stdout --> monitor

-> Concatenation : Is joining multiple strings together, using + operator 

-> NOTE : There is a concept over operator(+) overloading (Polymorphism), where a single 
    entity can exhibit multiple behaviors 

    -> using + operator, we can also perform mathematical addition operations, 
        when dealing with numbers

-> Interpolation : Is replacing placeholders with actual values

-> Using f-strings (Formatted String Literals)

    -> An f-string allows you to embed variables directly inside a string using {} 

    -> when using f-strings for print we add "f"


-> Operators : In python, an operator is symbol which performs an operation on
    variables and its values

    -> To Manipulate the data inside variable we need Operators

    -> Arithmetic Operators : Mathematical operations    
        -> + - * / %
        -> // - floor division(same as division, but rounds off value)
        -> ** - exponentiation(power)

    -> Compound Assignment Operators: Combining Arithmetic & Assignment Operators
        -> Used for concise(short hand) code 
        -> x = x + 5 (without Compound Assignment Operator)
        -> x += 5 (with Compound Assignment Operator)
        -> x *= 5
        
    -> Comparison Operators 
        -> Used to compare Values and they return boolean(True/False) as result
        -> ==, !=, >, <, >=, <=

    -> Logical Operators
        -> Used to combine multiple conditions(boolean values) 
        -> and : returns true, when both conditions are true
        -> or : returns true, when at least one condition is true
        -> not : negates the boolean value, if value is true, when we negate, 
            it becomes false 

    -> Membership Operators
        -> Used to test if a sequence is present in a object
            -> in : returns True, if the sequence has specified value
            -> not in : returns True, if the sequence has no specified value

    -> Identity Operators
        -> Used to compare objects    
        -> is : returns True, if both variables are pointing to same address
        -> is not : returns True, if both variables are not pointing to same address    
        -> NOTE : We use == to compare values

    -> OPTIONAL : Bitwise Operators
        -> Used for working with low level programming i.e binary bits (1001's)


-> Data Types 

    -> Data types are categories that define, what kind of data a variable can hold

    -> Python is dynamic type checked language 

    -> Let say i'm in java world (Static Typed Language)
        String brand = "THE BEAR HOUSE";
        String desc =  "Men Maroon & Navy Blue Slim Fit Checked Flannel Casual Shirt";
        float rating = 4.3f;
        int price = 923;

    -> Let say i'm in python world (Dynamic Typed Language)
        brand = "THE BEAR HOUSE"
        desc =  "Men Maroon & Navy Blue Slim Fit Checked Flannel Casual Shirt"
        rating = 4.3
        price = 923   
    
    -> Numeric Types 

        -> int : Whole numbers 0,1,-10, 20 etc
        -> float : Decimal numbers 3.14, 5.5, 2.0 etc
        -> complex :  in math we have a + ib ( i - imaginary number)
                      in python we use a + jb ( j - imaginary number)

    -> Text Type : String is a sequence of characters enclosed b/w ' ' or " "    

    -> Boolean Type : True / False

    -> Sequence Type 

        -> String : String is a sequence of characters enclosed b/w ' ' or " "    
        -> List : Multiple Values stored inside [] -> [10,20,30] -> Mutable
        -> Tuple : Multiple Values stored inside () -> (10,20,30) -> Immutable

    -> Set Type

        -> Set : Multiple Values stored inside {} -> {10,20,30} -> Mutable & Unique
        -> Frozen Set : Multiple Values stored inside {} -> {10,20,30} -> Immutable & Unique

    -> Mapping Type

        -> Dictionary : Multiple Key & Values stored inside {"name":"Ravi", "age":25} ->     

    -> None Type 

        -> Represent absence of value 

    -> NOTE : All above are pre-defined data types


3rd Sep 2025
============

-> Student Management System

-> Type Conversion & Type Casting

    -> The above are used to convert values from one data type to another data type

    -> Type Conversion : Implicit / Automatic meaning python by default performs 
        conversions when it's safe and there is no data loss 
            -> Widening : conversion of smaller data types to larger 
    
    -> Type Casting : Explicit / Manually done by developer using built in functions
        -> Narrowing : conversion of larger data types to smaller 
            -> int() -> converts to integer --> int(3.5) - 3
            -> float() -> converts to float --> int(3) - 3.0
            -> str() -> converts to string --> str(100) - "100"
            
4th Sep 2025
============

    -> Control Structures / Statement

    -> Control Structures helps you to control the flow of execution in program

    -> Categories

        -> Decision Making Statements (Conditional Statements)
        -> Looping Statements (Iterative Statements)
        -> Branching Statements (Jump Statements)

    -> Conditional / Decision Making Statements

        -> Used to evaluate a condition (True/False) 

        -> if : Runs block of code if condition is true
        -> if else : Runs one block of code if condition is true and 
                     runs another block of code if condition is false
        -> elif ladder : Used to check multiple conditions 
        -> match-case : alternative to if-else, when you have multiple conditions
    
    -> Indentation : Refers to spaces to the beginning of the line that will 
        define code blocks (conditionals, loops, functions, classes etc)

        -> At least one space or recommended is 4 spaces 
        -> All lines in the same block must have same Indentation
        -> Improper Indentation : Syntax Error
    
    -> input() function : takes user input from keyboard as a string 

        -> variable = input("Enter Some Value)

    -> Ternary Operator : also called as Conditional Operator, allows you to
        write short hand if-else Statement, generally used for single expressions

        -> Syntax : 
            value_if_true if condition else value_if_false


5th Sep 2025
============

    -> Nested Conditionals : Conditionals inside Conditionals

    -> Looping Statements (Iterative Statements)

        -> Used to execute a block of code repeatedly, based on a condition.

            -> For repetitive tasks and automation tasks
        
        -> while loop : Runs a block of code, as long as the specified condition is True

        -> for loop : Used to Iterate over a Sequence(Strings, Lists, Tuples, Range etc)
    
        -> dir() : used to list all the valid attributes and functionalities 

        -> range() : used to generate a sequence of numbers

6th Sep 2025
============

    -> range(start,stop,step)

        -> start: starting value by default is 0
        -> stop: ending value(excluded)
        -> step: increment default is 1

    -> few examples

        -> range(5) : 0 1 2 3 4
        -> range(1,6) : 1 2 3 4 5
        -> range(1,6,1) : 1 2 3 4 5
        -> range(2,10,2) : 2 4 6 8 

    -> To Do the step reverse use -1

        -> range(10,1,-1) : 10 9 8 7 6 5 4 3 2
        -> range(10,1,-2) : 10 8 6 4 2
    
    -> Nested Loops : Loops inside Loops

    -> Branching Statements (Jump Statements)

        -> Used to control the flow of iterations inside the loops  

            -> break : exits the loop entirely
            -> continue : skips the current iteration and continue the loop
            -> pass : does nothing, generally used as place holder

8th Sep 2025
============

-> Strings : One of the most important and widely used data type.

-> In Python, String is a sequence of characters enclosed within 
    single or double quotes, we can use triple quotes also but not recommended.

    -> NOTE : triple quotes are recommended for multi line strings 

    -> If you want to use ' inside a string, enclose with double quotes

    -> If you want to use " inside a string, enclose with single quotes

    -> If you want to use both ' and " quote, then use triple single or double quotes

-> Indexing In Python

    -> Python allows you to access each character in a string using an index number

    -> Index Starts From 0 (Zero)

    -> Indexing goes in both positive and negative directions too

    -> text = "python"

        0   1   2   3   4   5 (positive indexing)
        p   y   t   h   o   n
       -6              -2   -1 (negative indexing)

       -> print(text[index])
       -> print(text[4]) # o
    
    -> If index is not given properly, leads to Errors

    -> NOTE: we have a predefined function len() -> returns number of items in an object


    -> Slicing In Python : Slicing means cutting a substring from the original string using index

        -> To access range of characters in a string

        -> string[start:stop:step]

            start: index to start from (inclusive)
            stop: index to stop at (exclusive)
            step: how many character to step(default is 1)


9th Sep 2025
============

    -> Negative Slicing (Backward)

    -> Positive Slicing (Forward)

    -> String Immutability : Once a string is created, it cannot be changed 
    
    -> String Formatting 

    -> String Repetition : Multiply the string using * operator

    -> String Methods : String class provides multiple methods to work with string related operations

        -> Input : RAvi2KRIshna

        -> Output : ravi2krishna@gmail.combine

10th Sep 2025
=============

    -> String Methods : Continued 

    -> Application Using 
        [ Identifiers - Variables - Operators - Control Statements - Strings]

    
12th Sep 2025
=============

13th Sep 2025
=============

    -> Enhanced Student Grade & FEE Tracker - 2

15th Sep 2025
=============

    -> Complex Data Types (Data Structures)

        -> Simple Data Type : One Value 

            -> data = 10

        -> Complex Data Type : Multiple Values 

            -> data = [10,20,30,40,50] 

    -> In python to store more than one value, we have following classes

        -> Lists
        -> Tuples
        -> Sets
        -> Dictionaries

    -> Lists 

        -> List is a data Structure which allows you to store multiple values in single variable

        -> Lists are represented using [] or using list class

        -> Accessing Data in lists

            -> Like in strings, for lists we have index starts from 0

            -> Has both positive and negative index

            -> Indexing same as strings

            -> Slicing same as strings

            -> nums = [10,20,30,40,50]

                     0   1    2    3    4  (positive indexing)
                    10   20   30   40   50  
                    -6             -2   -1 (negative indexing)
            
            -> string[start:stop:step]

            start: index to start from (inclusive)
            stop: index to stop at (exclusive)
            step: how many character to step(default is 1)

    -> Negative Slicing (Backward)

    -> Positive Slicing (Forward)


16th Sep 2025
=============

    -> Looping Through Lists 

    -> Using Operators on elements of lists

    -> Conditionals with Lists 

    -> Duplicates are also allowed in Lists 

    -> List Methods / Operations

        print(dir(list))


17th Sep 2025
=============

-> List Methods / Operations Continued 

-> List Characteristics 

    -> Ordered : Lists preserve order 

    -> Mutable : Changeable / Modifiable (append(), remove())

    -> Duplicates allowed 

    -> Can hold different types of data (int, str, float etc)


->  Tuples 

     -> Tuples is a data Structure which allows you to store multiple values in single variable

        -> Tuples are represented using () or using tuple class

        -> Accessing Data in Tuples

            -> Like in strings, for Tuples we have index starts from 0

            -> Has both positive and negative index

            -> Indexing same as strings

            -> Slicing same as strings

            -> nums = (10,20,30,40,50)

                     0   1    2    3    4  (positive indexing)
                    10   20   30   40   50  
                    -6             -2   -1 (negative indexing)
            
            -> string[start:stop:step]

            start: index to start from (inclusive)
            stop: index to stop at (exclusive)
            step: how many character to step(default is 1)

    -> Negative Slicing (Backward)

    -> Positive Slicing (Forward)

    -> Looping Through Tuples 

    -> Using Operators on elements of Tuples

    -> Conditionals with Tuples 

    -> Duplicates are also allowed in Tuples 

    -> Tuples Methods / Operations

        print(dir(tuple))
    

-> Tuples Characteristics 

    -> Ordered : Tuples preserve order 

    -> Immutable(*) : Not Changeable / Not Modifiable (only index() & count())

    -> Duplicates allowed 

    -> Can hold different types of data (int, str, float etc)

    -> NOTE : Tuples should be used in READ ONLY DATA (Constant/Fixed/Static)

18th Sep 2025
=============

-> Dictionaries (Mapping Type Of Data)

    -> Dictionaries are a data Structure which allows you to store multiple key values in single variable

    -> key:value : Item/Pair 

    -> Dictionaries are represented using {} or using dict class

    -> NO INDEXING 

    -> NO SLICING 

    -> key:value ==> immutable:any_object

        -> keys can be immutables only (tuple, string, int)

        -> values can be any object

19th Sep 2025
=============

    -> Dictionary Operations

    -> Dictionary Characteristics 

        -> Ordered : Dictionary preserve order 

        -> Mutable : Changeable / Modifiable (update(), clear())

        -> Duplicates allowed 

            -> keys cannot be duplicates, if they are values will be replaced 

            -> value can be duplicates

        -> Can hold different types of data 

            -> keys should immutable only

            -> values can be any object
        
        -> NOTE : Dictionaries should be used in MAPPING TYPE Of data

-> Sets 

    -> Sets is a data Structure which allows you to store multiple values in single variable

        -> Sets are represented using {} or using set class

        -> dict = {1:100,2:200}
        -> set = {100,200}

    -> Sets are UUU 

        -> U - Unique (No Duplicates, if you add they will be removed)
        -> U - Unordered (Insertion Order is not preserved)
        -> U - Unindex (No Index)

        -> No Indexing

        -> No Slicing

    -> Sets are used especially for set related Mathematical operations

        -> Union
        -> Intersection 
        -> Difference 
        -> Symmetric Difference

20th Sep 2025
=============

    -> Set Operations

    -> Set is Mutable 
    -> FrozenSet is Immutable

    -> Set Characteristics 

        -> UnOrdered : Set don't preserve order 

        -> Mutable : Changeable / Modifiable 

        -> Duplicates Not allowed 

        -> Can hold different types of data (int, str, float etc)

        -> NOTE : Sets should be used in unordered / random access

        -> ImMutable Set: FrozenSet

22nd Sep 2025
=============

    -> Student Management System Using Complex Data Types 

    -> This Application will simulate CRUD operations that we perform on Databases 

    -> As of now it's a console based Application

    -> If you know web app frameworks, then you can build a web layer around this 

        -> Django 

23rd Sep 2025
=============

    -> Student Management System Continued 


24th Sep 2025
=============

    -> Functional Programming

    -> Functions : A function is block of code, which performs some task

    -> Why Functions ?

        -> Functions can help you break down complex problems into simpler and smaller manageable sub tasks  

        -> You can call a function multiple times, which avoids code Repetition, eventually 
            helps in code REUSABILITY 

    
    -> Syntax : 

        def function_name():
            Statements
    
    -> Functions with parameters 

        -> Using parameters with functions we can pass dynamic input for doing tasks

        def function_name(param 1, param 2, ...):
            Statements
    
    -> Function Types : Based on the arguments we pass, we have different types of Functions

        -> Positional Argument Based 
        -> Default Argument Based 
        -> Keyword Argument Based 
        -> Arbitrary Positional Argument Based (*args)
        -> Arbitrary Keyword Argument Based (**kwargs)

    
    -> Positional Argument Based 

        -> The passed argument to the function, should be in the exact order defined inside the function signature

        -> Here based on positions functionality will change 

    -> Default Argument Based 

        -> Passing default values as arguments to the functions

        -> Once we start adding default arguments, the next consecutive arguments should be default only 

25th Sep 2025
=============

    -> Keyword Argument Based

        -> Arguments will be passed explicitly specifying the name, so function call is 
            based on the name of the argument 

        -> Order doesn't matter 

        -> Improve code readability when you have multiple parameters

        -> Once we start adding Keyword arguments, the next consecutive arguments should be Keyword only 

    -> Arbitrary Positional Argument Based (*args)

        -> Arbitrary : unknown / random 

        -> Arbitrary Positional  will accept any number of Positional Based  Argument

    -> Arbitrary Keyword Argument Based (**kwargs)

        -> Arbitrary : unknown / random 

        -> Arbitrary Keyword  will accept any number of Keyword Based  Argument        

26th Sep 2025
=============

    -> "return" is a keyword in python, used in functions to give appropriate 
        response, when the function is called

    -> If we are using return make sure it is the last statement to be executed

    -> Function Composition 

        -> Function calling another function is called Function Composition, its for REUSABILITY

    -> Scope Of Variables Within Functions

        -> Scope : Where inside the code, a variable can be used or not

            -> Local Scope 

                -> A local variable is declared inside a function
                -> it only exists while the function runs
                -> we cannot use them outside the function

            -> Global Scope 

                -> A Global variable is declared outside the function
                -> it exists outside the function call as well
                -> it can be used anywhere in code, inside or outside the functions
                -> Global variable are read only by default
                -> As global variables can be accessed inside the functions, there can be
                name conflicts, in that case local variables get first preference  
                    -> if name conflict is there, and still want to give first preference to
                        global then we use globals()
                -> If you want global variable to changed inside the function, then we
                    need to use a special keywords called global 

27th Sep 2025
=============

    -> Built in Function 

        -> Functions which are already pre built into python 

        -> No need to define them 

        -> print() -> displays output 
        -> id () -> display object identity address 
        -> input() -> take user input 
        -> len() -> length of elements 
        -> max() -> largest element 
        -> etc 

    -> User Defined Functions 

        -> Functions which we create using def keyword, for custom requirements 

    -> Lambda Functions (Anonymous Functions)

        -> Lambda functions are One Line Functions 

        -> Especially for Single Line Expressions

        -> We use "lambda" keyword to work with lambda functions

        -> The result of lambda functions will be automatically returned 

        -> Mainly used for tasks, when passing a function as an argument

        -> Syntax 

            lambda arguments: expression

            NOTE : arguments can be multiple, but one line expression 

        -> IILE : Immediately Invoked Lambda Expressions

29th Sep 2025
=============

    -> Higher Order Functions (Functional Style Of Writing Code)

        -> Functions taking another function as an argument.

    -> map, filter and reduce ==> Higher Order Functions

    -> map()

        -> Applies a function to each item in a iterable 

        -> Just like for loop 

        -> Think of map() as "Do this to every element in iterable"

        -> Syntax

            map(function, iterable)

    -> filter()

        -> Filters the items of an iterable based on condition

        -> Just like using a for loop with condition

        -> Syntax

            filter(function, iterable) => the function must return True or False
    

    -> reduce()

        -> Reduces an iterable to a single value, by applying the functions cumulatively (again & again) 

        -> Syntax

            reduce(function, iterable)
        
        -> NOTE : reduce was updated inside a module called functools, so to use reduce(), we need to import 


    -> Higher Order Functions 

        -> map() : For loop 
        -> filter() : For loop with condition
        -> reduce() : combine all to single value 

30th Sep 2025
=============

    -> Student Management System Using Functional Style

6th Oct 2025
=============

    -> Modules 

        -> A module is a python file (.py) that contains Python Definitions
            (variables, functions, classes etc) and Statements

        -> It allows you to reuse code, by importing the module, 
            instead of rewriting again and again


    -> Types Of Modules

        -> Built in modules

            -> Provided as part of python standard Library

        -> User Defined Modules

            -> Created by your self, based on custom requirements

        -> External Modules 

            -> Provided by 3rd party vendors, you need pip tool 

            -> pip : python package manager 

            -> Downloaded from pypi.org 

    
    -> Syntax 

        import module (import whole module)

        from module import functionality (import specific functionality from module) (recommended)



7th Oct 2025
=============

    -> functions : block of code for REUSABILITY

    -> modules : a file of code for REUSABILITY

    -> package : a folder of code for REUSABILITY

    -> Package 

        -> A folder with multiple modules (python files) 

        -> Use it with folder name 

        -> NOTE: We need to create a special file in order to make a folder as package

            -> __init__.py (empty content / start up configs)
        

    -> File Management With Python 

        -> File Operations

            -> CRUD 

                -> CREATE
                -> READ
                -> UPDATE 
                -> DELETE 

        -> Earlier all the above activities we did in non-persistent storage (RAM)

            -> non-persistent storage/data - Temporary 

        -> Now i need the programs to save the data (HDD/SSD)

            -> persistent storage/data - Permanent  

    -> A file can be controlled using open() function with modes 

        -> read - r
        -> write - w
        -> append - a 

8th Oct 2025
=============

    -> File Operations Continued 

    -> To Read we can use read(), readline(), readlines()

    -> To Write i.e we can also create / update using "w" mode 

        -> write mode will overwrite 

    -> To Append i.e ame as write but keeps previous data then write new data using "a" mode 

9th Oct 2025
=============

    -> Working With CSV Files (Comma Separated Values)

        -> Very Commonly used in Data Domain (Data Analytics, Data Science, Data Engineering)

    -> We have "csv" module built-in standard python Library

        -> csv module provides classes that assist in the reading and writing of 
            Comma Separated Value (CSV) files

        -> Reading

            -> reader() : List Based (index)

            -> DictReader : Dictionary Based (key based)

        -> Writing

            -> csv.writer()

                -> writerow()
                -> writerows(Iterable)

            -> csv.DictWriter

                -> writeheader()
                -> writerow()
                -> writerows(Iterable)

10th Oct 2025
=============

    -> Working With JSON Files (Dictionary Like Data)

        -> Very Commonly used in Full Stack Development (API)

    -> We have "json" module built-in standard python Library

        -> csv module provides classes that assist in the reading and writing of 
            Comma Separated Value (CSV) files

        -> json operations

            -> dump

            -> load 

            -> dumps

            -> loads 


11th Oct 2025
=============

    -> Exception Handling 

        -> Exception : It's an Error, which occurs during the program execution 

        -> By default when python encounters an Error, it abruptly STOPS the Program 

        -> To change the above behavior, and handle the Exceptions by yourself we need following 

            -> try : used to keep the code that will cause errors 

            -> except : used to keep the code that should run, when error occurs 

            -> else : used to keep the code that should run, if no Exceptions are raised in try block 

            -> finally : used to keep the code, which should definitely run, even if there is an Exception or not 
                         closing connections etc 



13th Oct 2025
=============

    -> User Defined Exceptions 

        -> Syntax 

            class UserDefinedException(Exception):
                pass


    -> OOP 

        -> Object-oriented programming is a programming paradigm based on the "object" 
        a software entity that encapsulates data and function/method. 
        An OOP computer program consists of objects that interact with one another.

        -> OOP is way of writing programs that models real world entities (object)

            -> Student, Pen, Bike etc 

        -> Earlier 

            -> Writing Long List Of Instructions 

        -> Now 

            -> Think in terms of real world entities (object)

                -> Object - Data (Attributes / Variables)

                -> Object - Behavior (Methods / Functions)

        -> OOP Style Of Coding 

            -> Writing Code that follows Object Oriented Design

                -> Focus is in Objects & Object Relationship, not just functions

                -> You don't think about steps, you think about "who does what"

        ->  Four Pillars of OOP

            -> Inheritance 

                -> Reusability of Code From Parent Classes 

            -> Encapsulation

                -> Binding Data & Methods Together

            -> Abstraction 

                -> Hiding Complexity 

            -> Polymorphism

                -> Extensibility (One Entity -> Multiple Forms)
    
    ->                      Functional Style     vs      Object Oriented Style 

    -> Focus                Step by step actions            Real World Objects 

    -> Data & Function      Separate                        Combined Inside Class 

    -> Code Organization    One Big Script                  Multiple Reuseable Classes 

    -> Reusability          Harder                          Easier via Inheritance 

    -> Maintenance          Complex as code grows           Cleaner as 


    -> Functional Style Code 

        def student_attend_session(name):
            print(f"{name} attended session")

    -> Object Oriented Style Code

        class Student:
            def __init__(self, name):
                self.name = name 

            def attend_session(self):
                print(f"{self.name} attended session")

        -> OOPS version binds data and methods together     

    -> Why OOP / Advantages of OOP

        -> Makes Code Modular (Easy To understand)

        -> Lot Of Reusability 

        -> Supports Scalability (Easy To Build A Growing System )

        -> Mirrors Real World Structure

    -> Object 

        -> In terms of real world everything is an object

        -> Object has two entities

            -> An Object has something like Characteristics / properties (DATA) (car)

                -> car has a brand 
                -> car has a color
                -> car has price  


            -> An Object does something like behavior (METHOD) (car)

                -> car does drive forward
                -> car does drive backward
                -> car does horn
                -> car does blinkers 

            -> So, How to create an object ?

                -> We need Class 


    -> Class 

        -> A class is blueprint that defines Characteristics / properties (DATA) 
        and behaviors (METHOD) of an object 

    -> Object

        -> An Object is actual / real instance of a class 

14th Oct 2025
=============

    -> Classes & Objects 

    -> syntax

        class ClassName:
            pass 

        object_name = ClassName()

    -> Classes will be called automatically unlike functions 

        -> class call is not mandatory 

    -> Methods 

        -> Methods are like functions which are associated with objects 

            -> Like a function / methods is also a block of code which does task 

        -> Methods are defined inside the class 

        ->                     Function                            Method

        How to call            function_name(args)                 object.method_name(args)

        Belongs To             Independent                         Object 

        Defined using          def function_name                   def method_name(inside class)

    -> self 

        -> self refers to the current object 
        -> python automatically passes self when you call a method using object 
        -> that's why your methods must accept self as first parameter 

        -> NOTE : self is like this in other programming language (java)

    -> __init__ 

        -> __init__ is a special method in python 

        -> In other programming languages we have constructors 

        -> In python constructor is a special method i.e __init__()

        -> __init__ runs automatically, when a object is created 

        -> __init__ is used to initialize values to an object 

        -> syntax

            class ClassName:
                def __init__(self,parameters):
                    # assign the values  

        -> __init__ Implicitly returns None and we cannot change it 

15th Oct 2025
=============

    -> Object 

        -> In terms of real world, everything is an object 

        -> An object has two entities 

            -> An Object has something like Characteristics / Properties (DATA) 
                Variables (Attributes) - CAR 

                -> CAR has a brand 
                -> CAR has a price
                -> CAR has a color etc

            -> An Object does something like Behavior (FUNCTIONS) 
                METHODS - CAR 

                -> CAR does drive forward
                -> CAR does drive backward
                -> CAR does sound horn
                -> CAR does blink indicators etc 

            -> How to create an object ?

                -> We need Class 

    -> Class 

        -> A class is a blueprint for creating objects 

        -> A class will define what Characteristics and Behaviors, an object should posses

    -> Object 

        -> An Object is an actual / real instance of a class 


    -> Classes & Objects 

        -> Syntax for class 

            class ClassName:
                statements 

        -> Syntax for object 

            object = ClassName()

        -> NOTE : In python classes will be Automatically called, unlike functions 

        -> Class call is not required 
            

    -> Methods 

        -> Methods are like functions, which are associated with objects 

            -> A Method is block of Code, which performs a task (associated with objects )

        -> Method will be inside the class 

        
        ->                            Functions                              Methods

        How To Call                   function_name(args)                    object.method_name(args)

        Belongs To                    independent / global                   Object 

        Defined Using                 def function_name                      def method_name(inside class)

    -> When working with OOP Style, one of the Confusion initially is 

        -> Python Automatically Passes an object(self) to method 

        -> self is nothing but object reference 

        -> self is recommended by python, but you can pass anything as reference 
            
    -> __init__ 

        -> __init__() is a special methods (also called as Constructor) 

        -> Constructors are used to initialize the data 

        -> When we create an object Constructors are Automatically called 


16th Oct 2025
=============

    -> Instance Members => Instance Variables & Instance Methods 

    -> Instance Variables / Attributes 

        -> Instance Variables belongs to an object i.e instance, not the class 

        -> Instance Variables are defined in the __init__ method using self keyword 

        -> Each Object you create has it's own copy of instance variable with different values 

        -> Modifying an instance variable in one object, doesn't affect the same variable
            in other objects 

        -> Accessed via self.variable_name

        -> syntax

            class Demo:
                def __init__(self,value):
                    self.instance_var = value 


    -> Instance Methods 

        -> Methods which are defined inside a class which 
            operates on instance variables i,e operate on object

        -> Instance Methods are very commonly used types of methods in OOP 

        -> Instance Methods always take "self" as the first parameter 

        -> Instance Methods can access instance variables and also class variables too 

        -> Called using object_name.method()

    
    -> Class Variables 

        -> Class Variables are shared across all the instances of class 
            i.e shared by all the objects of the class 

        -> Class Variables belong to class, rather than objects, ideal for  
            storing data that is common/fixed for all objects 

        -> Defined inside the class, but outside the methods 

        -> Accessed using Classname.variable_name or object.variable_name 

            -> recommended is using Classname.variable_name

        -> NOTE : If Class Variables are changed, the change is reflected in all the instances unlike instance vars 

        -> Class Variables are memory efficient as only one copy is there unlike multiple copies like objects 

        -> syntax

            class Demo:
                class_var = "i'm shared data"
        
    -> Class Methods 

        -> Methods inside the class, which operates on class variables 

        -> Not very commonly used 

        -> Class Methods take "cls" as the first parameter 

        -> Class Methods are defined using @classmethod decorator 

        -> Can be accessed using Class Name or object, recommended is Classname 

        -> Accessing instance data inside a class method gives error 

    -> Static Members 

        -> In python we don't have Static Variables 

            -> In other languages like java static variable is equivalent to Class Variable 

            -> Static Variable == Class Variable

        -> Static Methods 

            -> Static Methods are not bound to either class or object 

            -> Static Methods does not depend on instance variable or class variable 

            -> Not a common method 

            -> Don't take self or cls as first parameter 

            -> NOTE : Behaves like a normal function, but inside a class  

            -> Declared used @staticmethod 

            -> Used as utilities / helper functions 

            -> Can be classed using both i,e class and object also 

17th Oct 2025
=============

    -> Learning Management System (LMS)

    -> Idea : How to use classes, objects and methods.

    -> Simulation of Grading and Payment System within LMS 

        -> Grading - Student 

        -> Payment - Trainer 

    -> The project is designed to help us understand how classes work together
        by defining methods and passing the data across the classes 

    -> Student Module 

        -> Student Info (ID, Name, Age etc)
        -> Attendance 
        -> Performance Based On Score 
        -> Trainer Rating 
        -> etc 

        -> Have Hover Like Functionality, which shows basic info like ID & Name 

        -> Have Click Like Functionality, which shows complete info like 
            ID, Name, Age, Email, Mobile Number 

        -> Ask student for number of sessions attended 

            -> 30 or more sessions attended add 5 Credits 
            -> 20-29 sessions attended add 3 Credits 
            -> Below 20 sessions attended add 0 Credits 

        -> Accept a score and based on score give credits 

            -> 85 and above score add 5 Credits 
            -> 60-84 score range add 3 Credits 
            -> Below 60 score add 0 Credits 

        -> Calculate final credits based on above 

            -> 10 Credits give 1st 
            -> 8-9 Credits give 2nd 
            -> Below 8 give 3rd

    -> Trainer Module 

        -> Trainer Info (ID, Name)

        -> Ask for number of sessions taken by trainer 

        -> Calculate payment for taking sessions, per session 2000

        -> Ask Student Rating for Trainer (1-5) 

            -> Rating is 5 : Give 5000 bonus 
            -> Otherwise : Give 0 bonus 

        -> Calculate Total Payment For Sessions 


21st Oct 2025
=============

    -> 4 Pillars Of OOP 

        -> Inheritance 

        -> Encapsulation

        -> Abstraction

        -> Polymorphism

    -> Inheritance 

        -> Inheritance is a core OOP concept where a new class, 
        called a subclass or child class, acquires the properties(vars) and methods 
        of an existing class, called a superclass or parent class.

        -> Main purpose of Inheritance is Code Reusability
        
        -> Syntax 

            class Parent:
                pass 

            class Child(Parent):
                pass 
        
        -> With Inheritance

            -> Code Reusability

            -> No Code Duplication 

            -> Project Size is less 

            -> Code Reliability improved 

            -> Code Maintainability improved

    -> Types Of Inheritance 

        -> Single Level Inheritance

            -> One Parent -> One Child 

        -> Multi Level Inheritance 

            -> Parent -> Child -> GrandChild 

        -> Multiple Inheritance 

            -> One Child -> Multiple Parents 

        -> Hierarchial Inheritance

            -> One Parent -> Multiple Child 

        -> Hybrid Inheritance

            -> Combination or two or more types 